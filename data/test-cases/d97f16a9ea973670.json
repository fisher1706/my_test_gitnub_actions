{
  "uid" : "d97f16a9ea973670",
  "name" : "Test try authorization with invalid code AWDEV-T491",
  "fullName" : "tests.ui.test_authorization_user.TestRegistrationUser#test_authorization_user_with_invalid_code_awdew_t491",
  "historyId" : "3cd9ebb5b840af328be660377b00b42d",
  "time" : {
    "start" : 1725662035359,
    "stop" : 1725662035359,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 600.000\n  (Session info: chrome=128.0.6613.119)",
  "statusTrace" : "pytestconfig = <_pytest.config.Config object at 0x7f7dc62f7610>\nrequest = <SubRequest 'set_driver' for <Function test_authorization_user_with_invalid_code_awdew_t491[{'name': '\\u0414\\u0438\\u043c\\u0430', 'phone': '+380637203664'}-1111]>>\n\n    @pytest.fixture(autouse=True)\n    def set_driver(pytestconfig, request):\n        driver = None\n        browser = pytestconfig.getoption(\"--browser_name\")\n        if browser == \"chrome\":\n            chromedriver_autoinstaller.install()\n            options = webdriver.ChromeOptions()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"--no-sandbox\")\n            options.add_argument(\"--disable-dev-shm-usage\")\n            options.add_argument(\"--window-size=1920,1080\")\n>           driver = webdriver.Chrome(options=options)\n\ntests/ui/conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n../local/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:208: in __init__\n    self.start_session(capabilities)\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7dc1aae830>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 600.000\\\\n  (Session info: chrome=128.0.6613.119)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 600.000\nE         (Session info: chrome=128.0.6613.119)\n\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1725660223552,
      "stop" : 1725660223552,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "set_env_settings",
    "time" : {
      "start" : 1725660223552,
      "stop" : 1725660223553,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1725660223471,
      "stop" : 1725660223552,
      "duration" : 81
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "set_driver",
    "time" : {
      "start" : 1725662035359,
      "stop" : 1725662635905,
      "duration" : 600546
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 600.000\n  (Session info: chrome=128.0.6613.119)\n\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.10/site-packages/pluggy/_callers.py\", line 166, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n  File \"/usr/local/lib/python3.10/site-packages/pluggy/_callers.py\", line 102, in _multicall\n    res = hook_impl.function(*args)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1132, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/fixtures.py\", line 906, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/usr/workspace/tests/ui/conftest.py\", line 23, in set_driver\n    driver = webdriver.Chrome(options=options)\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py\", line 66, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 208, in __init__\n    self.start_session(capabilities)\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 292, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 600.000\n  (Session info: chrome=128.0.6613.119)",
    "statusTrace" : "pytestconfig = <_pytest.config.Config object at 0x7f7dc62f7610>\nrequest = <SubRequest 'set_driver' for <Function test_authorization_user_with_invalid_code_awdew_t491[{'name': '\\u0414\\u0438\\u043c\\u0430', 'phone': '+380637203664'}-1111]>>\n\n    @pytest.fixture(autouse=True)\n    def set_driver(pytestconfig, request):\n        driver = None\n        browser = pytestconfig.getoption(\"--browser_name\")\n        if browser == \"chrome\":\n            chromedriver_autoinstaller.install()\n            options = webdriver.ChromeOptions()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"--no-sandbox\")\n            options.add_argument(\"--disable-dev-shm-usage\")\n            options.add_argument(\"--window-size=1920,1080\")\n>           driver = webdriver.Chrome(options=options)\n\ntests/ui/conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n../local/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:208: in __init__\n    self.start_session(capabilities)\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7dc1aae830>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 600.000\\\\n  (Session info: chrome=128.0.6613.119)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 600.000\nE         (Session info: chrome=128.0.6613.119)\n\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f95c01fae3632b42",
      "name" : "log",
      "source" : "f95c01fae3632b42.txt",
      "type" : "text/plain",
      "size" : 92
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests.ui"
  }, {
    "name" : "suite",
    "value" : "test_authorization_user"
  }, {
    "name" : "subSuite",
    "value" : "TestRegistrationUser"
  }, {
    "name" : "host",
    "value" : "4458b066b550"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.ui.test_authorization_user"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "code",
    "value" : "1111"
  }, {
    "name" : "user",
    "value" : "{'name': 'Дима', 'phone': '+380637203664'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 6,
        "skipped" : 0,
        "passed" : 6,
        "unknown" : 0,
        "total" : 12
      },
      "items" : [ {
        "uid" : "ba36889aacc679c1",
        "status" : "passed",
        "time" : {
          "start" : 1725537195588,
          "stop" : 1725537203595,
          "duration" : 8007
        }
      }, {
        "uid" : "cf9ea111600fd348",
        "status" : "passed",
        "time" : {
          "start" : 1723577198280,
          "stop" : 1723577205015,
          "duration" : 6735
        }
      }, {
        "uid" : "52da3644f03a51e9",
        "status" : "passed",
        "time" : {
          "start" : 1723576155255,
          "stop" : 1723576161709,
          "duration" : 6454
        }
      }, {
        "uid" : "3fff184ae4b61aa2",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: Service /root/.cache/selenium/chromedriver/linux64/127.0.6533.99/chromedriver unexpectedly exited. Status code was: 127",
        "time" : {
          "start" : 1723560990561,
          "stop" : 1723560990561,
          "duration" : 0
        }
      }, {
        "uid" : "49c1ee8ba2059939",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: Service /root/.cache/selenium/chromedriver/linux64/127.0.6533.99/chromedriver unexpectedly exited. Status code was: 127",
        "time" : {
          "start" : 1723548585729,
          "stop" : 1723548585729,
          "duration" : 0
        }
      }, {
        "uid" : "1c7c39625504ec5",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: Service /root/.cache/selenium/chromedriver/linux64/127.0.6533.99/chromedriver unexpectedly exited. Status code was: 127",
        "time" : {
          "start" : 1723533076151,
          "stop" : 1723533076151,
          "duration" : 0
        }
      }, {
        "uid" : "d139b25324c83763",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x7fc37f4e8e3a <unknown>\n#1 0x7fc37f1d245c <unknown>\n#2 0x7fc37f21e5b5 <unknown>\n#3 0x7fc37f21e671 <unknown>\n#4 0x7fc37f262f14 <unknown>\n#5 0x7fc37f2414dd <unknown>\n#6 0x7fc37f2602cc <unknown>\n#7 0x7fc37f241253 <unknown>\n#8 0x7fc37f2111c7 <unknown>\n#9 0x7fc37f211b3e <unknown>\n#10 0x7fc37f4af27b <unknown>\n#11 0x7fc37f4b3327 <unknown>\n#12 0x7fc37f49bdae <unknown>\n#13 0x7fc37f4b3df2 <unknown>\n#14 0x7fc37f48074f <unknown>\n#15 0x7fc37f4d8128 <unknown>\n#16 0x7fc37f4d82fb <unknown>\n#17 0x7fc37f4e7f6c <unknown>\n#18 0x7fc37fd56349 <unknown>",
        "time" : {
          "start" : 1718559067358,
          "stop" : 1718559093918,
          "duration" : 26560
        }
      }, {
        "uid" : "6cd0c0cacdfed1d3",
        "status" : "passed",
        "time" : {
          "start" : 1718551873328,
          "stop" : 1718551880917,
          "duration" : 7589
        }
      }, {
        "uid" : "4b29b197b7df6819",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x7f139c2aee3a <unknown>\n#1 0x7f139bf9845c <unknown>\n#2 0x7f139bfe45b5 <unknown>\n#3 0x7f139bfe4671 <unknown>\n#4 0x7f139c028f14 <unknown>\n#5 0x7f139c0074dd <unknown>\n#6 0x7f139c0262cc <unknown>\n#7 0x7f139c007253 <unknown>\n#8 0x7f139bfd71c7 <unknown>\n#9 0x7f139bfd7b3e <unknown>\n#10 0x7f139c27527b <unknown>\n#11 0x7f139c279327 <unknown>\n#12 0x7f139c261dae <unknown>\n#13 0x7f139c279df2 <unknown>\n#14 0x7f139c24674f <unknown>\n#15 0x7f139c29e128 <unknown>\n#16 0x7f139c29e2fb <unknown>\n#17 0x7f139c2adf6c <unknown>\n#18 0x7f139cb1c349 <unknown>",
        "time" : {
          "start" : 1718551166821,
          "stop" : 1718551193004,
          "duration" : 26183
        }
      }, {
        "uid" : "75de523fa21969ed",
        "status" : "passed",
        "time" : {
          "start" : 1718549940607,
          "stop" : 1718549948982,
          "duration" : 8375
        }
      }, {
        "uid" : "fb942f64e8332291",
        "status" : "passed",
        "time" : {
          "start" : 1718549515552,
          "stop" : 1718549523827,
          "duration" : 8275
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "d97f16a9ea973670.json",
  "parameterValues" : [ "1111", "{'name': 'Дима', 'phone': '+380637203664'}" ]
}